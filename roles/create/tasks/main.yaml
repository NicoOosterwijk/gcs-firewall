---
# vim:ft=ansible:
- name: Check if Google Cloud SDK is installed
  command: gcloud version
  register: gcloud_installed
  changed_when: false
  ignore_errors: yes

- fail:
    msg: "Please make sure Google Cloud SDK is installed before executing the role."
  when: gcloud_installed | failed

- name: Check if admin rule is already present
  command: "gcloud compute firewall-rules list --filter='name:{{ firewall_admin_rules.name }}' --format='value(NAME)'"
  register: admin_rule_present
  changed_when: false
  ignore_errors: yes
  tags: admin

- name: Set admin rule on google cloud platform
  command: >
    gcloud compute firewall-rules create "{{ firewall_admin_rules.name }}"
    --project="{{ firewall_admin_rules.project }}"
    --direction=INGRESS
    --priority=1000
    --network=default
    --action="{{ firewall_admin_rules.action }}"
    --rules="{{ firewall_admin_rules.protocol }}:{{ firewall_admin_rules.port }}"
    --source-ranges="{{ firewall_admin_rules.source_ranges }}"
    --target-tags="{{ firewall_admin_rules.target }}"

  changed_when: false
  when: admin_rule_present.stdout == ""
  tags: admin

- name: Check if health rule is already present
  command: "gcloud compute firewall-rules list --filter='name:{{ firewall_health_rules.name }}' --format='value(NAME)'"
  register: health_rule_present
  changed_when: false
  ignore_errors: yes
  tags: health

- name: Set health rule on google cloud platform
  command: >
    gcloud compute firewall-rules create "{{ firewall_health_rules.name }}"
    --project="{{ firewall_health_rules.project }}"
    --direction=INGRESS
    --priority=1000
    --network=default
    --action="{{ firewall_health_rules.action }}"
    --rules="{{ firewall_health_rules.rules }}"
    --source-ranges="{{ firewall_health_rules.source_ranges }}"
    --target-tags="{{ firewall_health_rules.target }}"

  changed_when: false
  when: health_rule_present.stdout == ""
  tags: health


